#####################################################################
#      Klicky-optimized bed-mesh
#####################################################################
## REF : https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02
## REF II : https://3dprintbeginner.com/faster-klipper-bed-probing-macro/
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
; gcode parameters
variable_parameter_AREA_MIN_X : 0.0
variable_parameter_AREA_MIN_Y : 0.0
variable_parameter_AREA_MAX_X : 0.0
variable_parameter_AREA_MAX_Y : 0.0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; maximum probe count
variable_max_probe_count : 6
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0

; Lagrange algorithm
variable_lagrange_max_probe_count : 6

; Bicubic algorithm
variable_bicubic_min_probe_count : 4

gcode:
    ; enable preference index
    {% set enable_reference_index = printer["gcode_macro _BRDS_CONFIGS"].bed_mesh_ref_index_activate | default(False) %}
    {% set klicky_activate = printer["gcode_macro _BRDS_CONFIGS"].klicky_activate | default(False) %}

    {% if klicky_activate %}
        _CheckProbe action=query
        G90
        Attach_Probe
    {% endif %}
    
    {% if params.AREA_MIN_X and params.AREA_MIN_Y and params.AREA_MAX_X and params.AREA_MAX_Y %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_MIN_X|float %}
	    {% set area_min_y = params.AREA_MIN_Y|float %}
	    {% set area_max_x = params.AREA_MAX_X|float %}
	    {% set area_max_y = params.AREA_MAX_Y|float %}

	    {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	    {% set meshMaxPointX = meshPointX %}
	    {% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
	        {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
	        {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and (meshPointX > lagrange_max_probe_count or meshPointY > lagrange_max_probe_count) or (meshPointX >=bicubic_min_probe_count and meshPointY >=bicubic_min_probe_count) %}
                {% if meshPointX < bicubic_min_probe_count %}
                    {% set meshPointX = bicubic_min_probe_count %}
                {% endif %}

                {% if meshPointY < bicubic_min_probe_count %}
                    {% set meshPointY = bicubic_min_probe_count %}
                {% endif %}

                {% set algorithm = bedMeshConfig.algorithm %}
            {% else %}
                {% if meshPointX < min_probe_count %}
                    {% set meshPointX = min_probe_count %}
                {% endif %}

                {% if meshPointY < min_probe_count %}
                    {% set meshPointY = min_probe_count %}
                {% endif %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                _BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                _BED_MESH_CALIBRATE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            _BED_MESH_CALIBRATE
        {% endif %}
    {% else %}
        _BED_MESH_CALIBRATE
    {% endif %}

    {% if klicky_activate %}
        Dock_Probe
    {% endif %}
    
#####################################################################

[gcode_macro CREATE_BED_MESH]
description: Perform Mesh Bed Leveling with klicky automount
gcode:
    BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

#####################################################################
